import * as Notifications from 'expo-notifications'
// Mock Battery API since expo-battery is not available in Snack
const Battery = {
  isBatteryOptimizationEnabledAsync: async () => false,
}
import { Platform } from 'react-native'
import AsyncStorage from '@react-native-async-storage/async-storage'
import { NOTIFICATION_CONFIG } from '../config/appConfig'
import { logNotification } from './notifications'

/**
 * L·ªõp qu·∫£n l√Ω b√°o th·ª©c v·ªõi ƒë·ªô tin c·∫≠y cao
 * Cung c·∫•p c√°c ph∆∞∆°ng th·ª©c ƒë·ªÉ l√™n l·ªãch, h·ªßy v√† qu·∫£n l√Ω b√°o th·ª©c
 */
class AlarmManager {
  constructor() {
    this.hasPermission = false
    this.hasCriticalPermission = false
    this.hasBatteryOptimizationDisabled = false
    this.initialized = false
  }

  /**
   * Kh·ªüi t·∫°o AlarmManager v√† ki·ªÉm tra c√°c quy·ªÅn c·∫ßn thi·∫øt
   */
  async initialize() {
    if (this.initialized) return

    // Ki·ªÉm tra quy·ªÅn th√¥ng b√°o
    const { status } = await Notifications.getPermissionsAsync()
    this.hasPermission = status === 'granted'

    // Ki·ªÉm tra quy·ªÅn th√¥ng b√°o quan tr·ªçng (iOS)
    if (Platform.OS === 'ios') {
      const settings = await Notifications.getPermissionsAsync()
      this.hasCriticalPermission = settings.ios?.allowsCriticalAlerts || false
    }

    // Ki·ªÉm tra t·ªëi ∆∞u h√≥a pin (Android)
    if (Platform.OS === 'android') {
      try {
        // Tr√™n thi·∫øt b·ªã th·ª±c, s·ª≠ d·ª•ng th∆∞ vi·ªán nh∆∞ react-native-battery-optimization-check
        // ƒê√¢y ch·ªâ l√† m√£ gi·∫£ ƒë·ªÉ m√¥ ph·ªèng ch·ª©c nƒÉng
        const batteryOptimizationStatus =
          await Battery.isBatteryOptimizationEnabledAsync()
        this.hasBatteryOptimizationDisabled = !batteryOptimizationStatus
      } catch (error) {
        console.warn('Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i t·ªëi ∆∞u h√≥a pin:', error)
        this.hasBatteryOptimizationDisabled = false
      }
    }

    // C·∫•u h√¨nh k√™nh th√¥ng b√°o cho Android
    if (Platform.OS === 'android') {
      await this._setupNotificationChannels()
    }

    this.initialized = true
    return {
      hasPermission: this.hasPermission,
      hasCriticalPermission: this.hasCriticalPermission,
      hasBatteryOptimizationDisabled: this.hasBatteryOptimizationDisabled,
    }
  }

  /**
   * Thi·∫øt l·∫≠p c√°c k√™nh th√¥ng b√°o cho Android
   * @private
   */
  async _setupNotificationChannels() {
    // K√™nh b√°o th·ª©c ch√≠nh
    await Notifications.setNotificationChannelAsync(
      NOTIFICATION_CONFIG.CHANNEL_ID,
      {
        name: NOTIFICATION_CONFIG.CHANNEL_NAME,
        importance: Notifications.AndroidImportance.MAX,
        vibrationPattern: NOTIFICATION_CONFIG.VIBRATION_PATTERN,
        lightColor: NOTIFICATION_CONFIG.LIGHT_COLOR,
        sound: 'default',
        enableVibrate: true,
        lockscreenVisibility:
          Notifications.AndroidNotificationVisibility.PUBLIC,
        bypassDnd: true, // B·ªè qua ch·∫ø ƒë·ªô Kh√¥ng l√†m phi·ªÅn
      }
    )

    // K√™nh nh·∫Øc nh·ªü ca l√†m vi·ªác
    await Notifications.setNotificationChannelAsync('shift_reminders', {
      name: 'Nh·∫Øc nh·ªü ca l√†m vi·ªác',
      importance: Notifications.AndroidImportance.HIGH,
      vibrationPattern: NOTIFICATION_CONFIG.VIBRATION_PATTERN,
      lightColor: NOTIFICATION_CONFIG.LIGHT_COLOR,
      sound: 'default',
    })

    // K√™nh nh·∫Øc nh·ªü ghi ch√∫
    await Notifications.setNotificationChannelAsync('note_reminders', {
      name: 'Nh·∫Øc nh·ªü ghi ch√∫',
      importance: Notifications.AndroidImportance.DEFAULT,
      vibrationPattern: NOTIFICATION_CONFIG.VIBRATION_PATTERN,
      lightColor: NOTIFICATION_CONFIG.LIGHT_COLOR,
      sound: 'default',
    })
  }

  /**
   * Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o
   * @returns {Promise<boolean>} K·∫øt qu·∫£ y√™u c·∫ßu quy·ªÅn
   */
  async requestPermissions() {
    try {
      const { status } = await Notifications.requestPermissionsAsync({
        ios: {
          allowAlert: true,
          allowBadge: true,
          allowSound: true,
          allowAnnouncements: true,
          // Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o quan tr·ªçng n·∫øu c√≥ th·ªÉ
          allowCriticalAlerts: true,
          provideAppNotificationSettings: true,
        },
      })

      this.hasPermission = status === 'granted'

      // Ki·ªÉm tra quy·ªÅn th√¥ng b√°o quan tr·ªçng (iOS)
      if (Platform.OS === 'ios' && status === 'granted') {
        const settings = await Notifications.getPermissionsAsync()
        this.hasCriticalPermission = settings.ios?.allowsCriticalAlerts || false
      }

      return this.hasPermission
    } catch (error) {
      console.error('L·ªói khi y√™u c·∫ßu quy·ªÅn th√¥ng b√°o:', error)
      return false
    }
  }

  /**
   * Y√™u c·∫ßu t·∫Øt t·ªëi ∆∞u h√≥a pin (Android)
   * Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, c·∫ßn m·ªü m√†n h√¨nh c√†i ƒë·∫∑t ƒë·ªÉ ng∆∞·ªùi d√πng t·∫Øt th·ªß c√¥ng
   * @returns {Promise<boolean>} K·∫øt qu·∫£ y√™u c·∫ßu
   */
  async requestDisableBatteryOptimization() {
    if (Platform.OS !== 'android') return true

    try {
      // Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, s·ª≠ d·ª•ng th∆∞ vi·ªán nh∆∞ react-native-battery-optimization-check
      // ƒë·ªÉ m·ªü m√†n h√¨nh c√†i ƒë·∫∑t t·ªëi ∆∞u h√≥a pin
      console.log('Y√™u c·∫ßu t·∫Øt t·ªëi ∆∞u h√≥a pin')

      // M√£ gi·∫£ - trong ·ª©ng d·ª•ng th·ª±c t·∫ø, c·∫ßn m·ªü m√†n h√¨nh c√†i ƒë·∫∑t
      this.hasBatteryOptimizationDisabled = true
      return true
    } catch (error) {
      console.error('L·ªói khi y√™u c·∫ßu t·∫Øt t·ªëi ∆∞u h√≥a pin:', error)
      return false
    }
  }

  /**
   * L√™n l·ªãch b√°o th·ª©c v·ªõi ƒë·ªô tin c·∫≠y cao
   * @param {Object} options T√πy ch·ªçn b√°o th·ª©c
   * @param {string} options.title Ti√™u ƒë·ªÅ b√°o th·ª©c
   * @param {string} options.body N·ªôi dung b√°o th·ª©c
   * @param {Date} options.scheduledTime Th·ªùi gian l√™n l·ªãch
   * @param {string} options.type Lo·∫°i b√°o th·ª©c ('shift', 'note', 'check_in', 'check_out')
   * @param {string} options.id ID duy nh·∫•t cho b√°o th·ª©c
   * @param {Object} options.data D·ªØ li·ªáu b·ªï sung
   * @param {boolean} options.repeats C√≥ l·∫∑p l·∫°i kh√¥ng
   * @param {number} options.weekday Ng√†y trong tu·∫ßn (1-7, n·∫øu l·∫∑p l·∫°i)
   * @returns {Promise<string>} ID c·ªßa th√¥ng b√°o ƒë√£ l√™n l·ªãch
   */
  async scheduleAlarm({
    title,
    body,
    scheduledTime,
    type,
    id,
    data = {},
    repeats = false,
    weekday = null,
  }) {
    if (!this.initialized) {
      await this.initialize()
    }

    if (!this.hasPermission) {
      const granted = await this.requestPermissions()
      if (!granted) {
        throw new Error('Kh√¥ng c√≥ quy·ªÅn th√¥ng b√°o')
      }
    }

    // X√°c ƒë·ªãnh k√™nh th√¥ng b√°o d·ª±a tr√™n lo·∫°i
    let channelId = NOTIFICATION_CONFIG.CHANNEL_ID
    if (type === 'shift') {
      channelId = 'shift_reminders'
    } else if (type === 'note') {
      channelId = 'note_reminders'
    }

    // T·∫°o n·ªôi dung th√¥ng b√°o
    const notificationContent = {
      title: this._formatAlarmTitle(title, type),
      body,
      data: {
        isAlarm: true,
        type,
        id,
        title,
        message: body,
        time: scheduledTime.toISOString(),
        ...data,
      },
      sound: true,
      vibrate: true,
      priority: 'high',
      channelId,
    }

    // T·∫°o trigger
    let trigger = { date: scheduledTime }

    // N·∫øu l·∫∑p l·∫°i theo ng√†y trong tu·∫ßn
    if (repeats && weekday) {
      trigger = {
        weekday,
        hour: scheduledTime.getHours(),
        minute: scheduledTime.getMinutes(),
        repeats: true,
      }
    }

    // C·∫•u h√¨nh ƒë·∫∑c bi·ªát cho Android
    if (Platform.OS === 'android') {
      // S·ª≠ d·ª•ng full-screen intent cho b√°o th·ª©c quan tr·ªçng
      if (type === 'check_in' || type === 'check_out') {
        notificationContent.android = {
          ...notificationContent.android,
          channelId: NOTIFICATION_CONFIG.CHANNEL_ID,
          priority: 'max',
          fullScreenIntent: true,
        }
      }
    }

    // L√™n l·ªãch th√¥ng b√°o
    const notificationId = await Notifications.scheduleNotificationAsync({
      content: notificationContent,
      trigger,
      identifier: id,
    })

    // L∆∞u th√¥ng tin b√°o th·ª©c ƒë·ªÉ theo d√µi
    await this._saveScheduledAlarm({
      id: notificationId,
      title,
      body,
      scheduledTime: scheduledTime.toISOString(),
      type,
      data,
      repeats,
      weekday,
    })

    return notificationId
  }

  /**
   * ƒê·ªãnh d·∫°ng ti√™u ƒë·ªÅ b√°o th·ª©c d·ª±a tr√™n lo·∫°i
   * @param {string} title Ti√™u ƒë·ªÅ g·ªëc
   * @param {string} type Lo·∫°i b√°o th·ª©c
   * @returns {string} Ti√™u ƒë·ªÅ ƒë√£ ƒë·ªãnh d·∫°ng
   * @private
   */
  _formatAlarmTitle(title, type) {
    switch (type) {
      case 'check_in':
        return '‚è∞ CHECK-IN! ' + title
      case 'check_out':
        return '‚è∞ CHECK-OUT! ' + title
      case 'shift':
        return '‚è∞ ƒê·∫æN GI·ªú ƒêI L√ÄM! ' + title
      case 'note':
        return 'üìù NH·∫ÆC VI·ªÜC! ' + title
      default:
        return '‚è∞ ' + title
    }
  }

  /**
   * L∆∞u th√¥ng tin b√°o th·ª©c ƒë√£ l√™n l·ªãch
   * @param {Object} alarm Th√¥ng tin b√°o th·ª©c
   * @private
   */
  async _saveScheduledAlarm(alarm) {
    try {
      const scheduledAlarmsJson = await AsyncStorage.getItem('scheduled_alarms')
      const scheduledAlarms = scheduledAlarmsJson
        ? JSON.parse(scheduledAlarmsJson)
        : []

      // Th√™m b√°o th·ª©c m·ªõi
      scheduledAlarms.push(alarm)

      // L∆∞u danh s√°ch b√°o th·ª©c
      await AsyncStorage.setItem(
        'scheduled_alarms',
        JSON.stringify(scheduledAlarms)
      )
    } catch (error) {
      console.error('L·ªói khi l∆∞u th√¥ng tin b√°o th·ª©c:', error)
    }
  }

  /**
   * X√≥a th√¥ng tin b√°o th·ª©c ƒë√£ l√™n l·ªãch
   * @param {string} alarmId ID b√°o th·ª©c
   * @private
   */
  async _removeScheduledAlarm(alarmId) {
    try {
      const scheduledAlarmsJson = await AsyncStorage.getItem('scheduled_alarms')
      if (!scheduledAlarmsJson) return

      let scheduledAlarms = JSON.parse(scheduledAlarmsJson)

      // L·ªçc b·ªè b√°o th·ª©c c·∫ßn x√≥a
      scheduledAlarms = scheduledAlarms.filter((alarm) => alarm.id !== alarmId)

      // L∆∞u danh s√°ch b√°o th·ª©c
      await AsyncStorage.setItem(
        'scheduled_alarms',
        JSON.stringify(scheduledAlarms)
      )
    } catch (error) {
      console.error('L·ªói khi x√≥a th√¥ng tin b√°o th·ª©c:', error)
    }
  }

  /**
   * H·ªßy b√°o th·ª©c ƒë√£ l√™n l·ªãch
   * @param {string} alarmId ID b√°o th·ª©c
   * @returns {Promise<boolean>} K·∫øt qu·∫£ h·ªßy b√°o th·ª©c
   */
  async cancelAlarm(alarmId) {
    try {
      await Notifications.cancelScheduledNotificationAsync(alarmId)
      await this._removeScheduledAlarm(alarmId)
      return true
    } catch (error) {
      console.error('L·ªói khi h·ªßy b√°o th·ª©c:', error)
      return false
    }
  }

  /**
   * H·ªßy t·∫•t c·∫£ b√°o th·ª©c c√≥ ti·ªÅn t·ªë ID nh·∫•t ƒë·ªãnh
   * @param {string} idPrefix Ti·ªÅn t·ªë ID b√°o th·ª©c
   * @returns {Promise<boolean>} K·∫øt qu·∫£ h·ªßy b√°o th·ª©c
   */
  async cancelAlarmsByPrefix(idPrefix) {
    try {
      const scheduledNotifications =
        await Notifications.getAllScheduledNotificationsAsync()

      // L·ªçc c√°c th√¥ng b√°o c√≥ ID b·∫Øt ƒë·∫ßu b·∫±ng ti·ªÅn t·ªë
      const matchingNotifications = scheduledNotifications.filter(
        (notification) => notification.identifier.startsWith(idPrefix)
      )

      // H·ªßy t·ª´ng th√¥ng b√°o
      for (const notification of matchingNotifications) {
        await Notifications.cancelScheduledNotificationAsync(
          notification.identifier
        )
        await this._removeScheduledAlarm(notification.identifier)
      }

      return true
    } catch (error) {
      console.error('L·ªói khi h·ªßy b√°o th·ª©c theo ti·ªÅn t·ªë:', error)
      return false
    }
  }

  /**
   * L√™n l·ªãch b√°o l·∫°i sau m·ªôt kho·∫£ng th·ªùi gian
   * @param {Object} originalAlarm Th√¥ng tin b√°o th·ª©c g·ªëc
   * @param {number} delayMinutes S·ªë ph√∫t tr√¨ ho√£n
   * @returns {Promise<string>} ID c·ªßa b√°o th·ª©c m·ªõi
   */
  async snoozeAlarm(originalAlarm, delayMinutes = 5) {
    try {
      // T√≠nh th·ªùi gian b√°o l·∫°i
      const now = new Date()
      const snoozeTime = new Date(now.getTime() + delayMinutes * 60 * 1000)

      // T·∫°o ID m·ªõi cho b√°o th·ª©c b√°o l·∫°i
      const snoozeId = `${originalAlarm.id}_snooze_${Date.now()}`

      // L√™n l·ªãch b√°o th·ª©c m·ªõi
      return await this.scheduleAlarm({
        title: originalAlarm.title,
        body: `[B√ÅO L·∫†I] ${originalAlarm.body}`,
        scheduledTime: snoozeTime,
        type: originalAlarm.type,
        id: snoozeId,
        data: originalAlarm.data,
      })
    } catch (error) {
      console.error('L·ªói khi b√°o l·∫°i b√°o th·ª©c:', error)
      return null
    }
  }

  /**
   * L·∫•y danh s√°ch t·∫•t c·∫£ b√°o th·ª©c ƒë√£ l√™n l·ªãch
   * @returns {Promise<Array>} Danh s√°ch b√°o th·ª©c
   */
  async getAllScheduledAlarms() {
    try {
      const scheduledNotifications =
        await Notifications.getAllScheduledNotificationsAsync()
      return scheduledNotifications.map((notification) => ({
        id: notification.identifier,
        title: notification.content.title,
        body: notification.content.body,
        data: notification.content.data,
        trigger: notification.trigger,
      }))
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch b√°o th·ª©c:', error)
      return []
    }
  }

  /**
   * X·ª≠ l√Ω khi nh·∫≠n th√¥ng b√°o b√°o th·ª©c
   * @param {Object} notification Th√¥ng b√°o
   */
  async handleAlarmNotification(notification) {
    try {
      const data = notification.request.content.data

      // Ghi log th√¥ng b√°o
      await logNotification(notification)

      // X·ª≠ l√Ω theo lo·∫°i b√°o th·ª©c
      if (data.isAlarm) {
        // Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, c√≥ th·ªÉ th·ª±c hi·ªán c√°c h√†nh ƒë·ªông b·ªï sung
        // nh∆∞ m·ªü m√†n h√¨nh b√°o th·ª©c, ph√°t √¢m thanh, v.v.
        console.log('ƒê√£ nh·∫≠n b√°o th·ª©c:', data.type)
      }
    } catch (error) {
      console.error('L·ªói khi x·ª≠ l√Ω th√¥ng b√°o b√°o th·ª©c:', error)
    }
  }

  /**
   * L√™n l·ªãch b√°o th·ª©c check-in
   * @param {Object} shift Th√¥ng tin ca l√†m vi·ªác
   * @param {Date} scheduledTime Th·ªùi gian l√™n l·ªãch
   * @returns {Promise<string>} ID c·ªßa b√°o th·ª©c
   */
  async scheduleCheckInAlarm(shift, scheduledTime) {
    return this.scheduleAlarm({
      title: shift.name,
      body: `ƒê√£ ƒë·∫øn gi·ªù check-in ca ${shift.name} (${shift.startTime})`,
      scheduledTime,
      type: 'check_in',
      id: `check_in_${shift.id}_${Date.now()}`,
      data: { shiftId: shift.id, action: 'check_in' },
    })
  }

  /**
   * L√™n l·ªãch b√°o th·ª©c check-out
   * @param {Object} shift Th√¥ng tin ca l√†m vi·ªác
   * @param {Date} scheduledTime Th·ªùi gian l√™n l·ªãch
   * @returns {Promise<string>} ID c·ªßa b√°o th·ª©c
   */
  async scheduleCheckOutAlarm(shift, scheduledTime) {
    return this.scheduleAlarm({
      title: shift.name,
      body: `ƒê√£ ƒë·∫øn gi·ªù check-out ca ${shift.name} (${shift.endTime})`,
      scheduledTime,
      type: 'check_out',
      id: `check_out_${shift.id}_${Date.now()}`,
      data: { shiftId: shift.id, action: 'check_out' },
    })
  }
}

// T·∫°o v√† xu·∫•t instance duy nh·∫•t
const alarmManager = new AlarmManager()
export default alarmManager
